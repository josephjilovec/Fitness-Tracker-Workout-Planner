## Use JSON Web Tokens (JWT) to manage user sessions
## Create middleware to handle user authentication and protect specific routes that require authentication
## Set up user authentication using JWT in Node.js with Express

   ## Install the required package:

npm install jsonwebtoken

## Create a "middleware/auth.js" file to define the authentication middleware

// middleware/auth.js
const jwt = require('jsonwebtoken');
const dotenv = require('dotenv');

dotenv.config();
const JWT_SECRET = process.env.JWT_SECRET;

const authenticateUser = (req, res, next) => {
  const token = req.header('Authorization');

  if (!token) {
    return res.status(401).json({ error: 'Access denied. Please log in first.' });
  }

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(401).json({ error: 'Invalid token. Please log in again.' });
    }

    req.user = user;
    next();
  });
};

module.exports = authenticateUser;

## In your main server file (index.js), use the authentication middleware for routes that require authentication

// index.js
const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');
const db = require('./db'); // Import the database connection
const User = require('./models/User');
const Workout = require('./models/Workout');
const Exercise = require('./models/Exercise');
const authenticateUser = require('./middleware/auth'); // Import the authentication middleware

dotenv.config();

const app = express();

// ... rest of the code ...

// Route that requires authentication
app.get('/api/protected', authenticateUser, (req, res) => {
  // Access the authenticated user from the request object
  const { userId } = req.user;

  // You can perform additional actions with the authenticated user, such as fetching user data from the database
  // For example, fetch the user from the database using the userId
  User.findById(userId)
    .then((user) => {
      if (!user) {
        return res.status(404).json({ error: 'User not found' });
      }
      // Do something with the user data...
      return res.status(200).json({ message: 'Protected route accessed successfully' });
    })
    .catch((err) => {
      res.status(500).json({ error: 'Error fetching user data' });
    });
});

## // ... rest of the routes ...

## For user registration and login, you can use the routes created earlier in the "routes/users.js" file
## When a user successfully registers or logs in, generate a JWT token and send it as a response

// routes/users.js
const jwt = require('jsonwebtoken');
const dotenv = require('dotenv');
const User = require('../models/User');

dotenv.config();
const JWT_SECRET = process.env.JWT_SECRET;

// User registration
router.post('/register', async (req, res) => {
  try {
    // ... create a new user in the database ...

    // Generate JWT token
    const token = jwt.sign({ userId: newUser._id }, JWT_SECRET, { expiresIn: '1h' });
    res.status(201).json({ token });
  } catch (error) {
    res.status(500).json({ error: 'Error registering user' });
  }
});

// User login
router.post('/login', async (req, res) => {
  try {
    // ... validate user credentials and check if user exists in the database ...

    // Generate JWT token
    const token = jwt.sign({ userId: user._id }, JWT_SECRET, { expiresIn: '1h' });
    res.status(200).json({ token });
  } catch (error) {
    res.status(500).json({ error: 'Error logging in' });
  }
});

## With this setup, you have implemented user authentication using JWT in your "Fitness Tracker & Workout Planner" web app
## The authentication middleware will check the validity of the JWT token on routes that require authentication, ensuring that only authenticated users can access those routes
## Remember to store the generated JWT token securely on the client-side and include it in the Authorization header for authenticated requests
